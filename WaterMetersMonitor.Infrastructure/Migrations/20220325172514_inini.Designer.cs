// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WaterMetersMonitor.Infrastructure.DataContexts;

#nullable disable

namespace WaterMetersMonitor.Infrastructure.Migrations
{
    [DbContext(typeof(SqlDataContext))]
    [Migration("20220325172514_inini")]
    partial class inini
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("WaterMetersMonitor.Domain.Entities.Group", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("GroupName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsDisabled")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("Updated")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("WaterMetersMonitor.Domain.Entities.MainWaterMeter", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<long>("GroupId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("Updated")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.ToTable("MainWaterMeters");
                });

            modelBuilder.Entity("WaterMetersMonitor.Domain.Entities.MainWaterMeterValue", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<long>("MainWaterMeterId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("Updated")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2");

                    b.Property<double>("Value")
                        .HasColumnType("float");

                    b.Property<DateTime>("ValueTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("MainWaterMeterId");

                    b.ToTable("MainWaterMeterValues");
                });

            modelBuilder.Entity("WaterMetersMonitor.Domain.Entities.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirebaseUid")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("GroupId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Updated")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("WaterMetersMonitor.Domain.Entities.WaterMeter", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<float>("CubicMetersAllowed")
                        .HasColumnType("real");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("Updated")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("WaterMeters");
                });

            modelBuilder.Entity("WaterMetersMonitor.Domain.Entities.WaterMeterValue", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Updated")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2");

                    b.Property<double>("Value")
                        .HasColumnType("float");

                    b.Property<DateTime>("ValueTime")
                        .HasColumnType("datetime2");

                    b.Property<long>("WaterMeterId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("WaterMeterId");

                    b.ToTable("WaterMeterValues");
                });

            modelBuilder.Entity("WaterMetersMonitor.Domain.Entities.MainWaterMeter", b =>
                {
                    b.HasOne("WaterMetersMonitor.Domain.Entities.Group", "Group")
                        .WithMany("MainWaterMeters")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");
                });

            modelBuilder.Entity("WaterMetersMonitor.Domain.Entities.MainWaterMeterValue", b =>
                {
                    b.HasOne("WaterMetersMonitor.Domain.Entities.MainWaterMeter", "MainWaterMeter")
                        .WithMany("MainWaterMeterValues")
                        .HasForeignKey("MainWaterMeterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MainWaterMeter");
                });

            modelBuilder.Entity("WaterMetersMonitor.Domain.Entities.User", b =>
                {
                    b.HasOne("WaterMetersMonitor.Domain.Entities.Group", "Group")
                        .WithMany("Users")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");
                });

            modelBuilder.Entity("WaterMetersMonitor.Domain.Entities.WaterMeter", b =>
                {
                    b.HasOne("WaterMetersMonitor.Domain.Entities.User", "User")
                        .WithMany("WaterMeters")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("WaterMetersMonitor.Domain.Entities.WaterMeterValue", b =>
                {
                    b.HasOne("WaterMetersMonitor.Domain.Entities.WaterMeter", "WaterMeter")
                        .WithMany("WaterMeterValues")
                        .HasForeignKey("WaterMeterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WaterMeter");
                });

            modelBuilder.Entity("WaterMetersMonitor.Domain.Entities.Group", b =>
                {
                    b.Navigation("MainWaterMeters");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("WaterMetersMonitor.Domain.Entities.MainWaterMeter", b =>
                {
                    b.Navigation("MainWaterMeterValues");
                });

            modelBuilder.Entity("WaterMetersMonitor.Domain.Entities.User", b =>
                {
                    b.Navigation("WaterMeters");
                });

            modelBuilder.Entity("WaterMetersMonitor.Domain.Entities.WaterMeter", b =>
                {
                    b.Navigation("WaterMeterValues");
                });
#pragma warning restore 612, 618
        }
    }
}
